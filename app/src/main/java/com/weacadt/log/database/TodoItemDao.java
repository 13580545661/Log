package com.weacadt.log.database;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.weacadt.log.data.TodoItem;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "TODO_ITEM".
*/
public class TodoItemDao extends AbstractDao<TodoItem, Long> {

    public static final String TABLENAME = "TODO_ITEM";

    /**
     * Properties of entity TodoItem.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Thing = new Property(1, String.class, "thing", false, "THING");
        public final static Property IsDone = new Property(2, boolean.class, "isDone", false, "IS_DONE");
        public final static Property Date = new Property(3, java.util.Date.class, "date", false, "DATE");
    }


    public TodoItemDao(DaoConfig config) {
        super(config);
    }
    
    public TodoItemDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"TODO_ITEM\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"THING\" TEXT," + // 1: thing
                "\"IS_DONE\" INTEGER NOT NULL ," + // 2: isDone
                "\"DATE\" INTEGER);"); // 3: date
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"TODO_ITEM\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, TodoItem entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String thing = entity.getThing();
        if (thing != null) {
            stmt.bindString(2, thing);
        }
        stmt.bindLong(3, entity.getIsDone() ? 1L: 0L);
 
        java.util.Date date = entity.getDate();
        if (date != null) {
            stmt.bindLong(4, date.getTime());
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, TodoItem entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String thing = entity.getThing();
        if (thing != null) {
            stmt.bindString(2, thing);
        }
        stmt.bindLong(3, entity.getIsDone() ? 1L: 0L);
 
        java.util.Date date = entity.getDate();
        if (date != null) {
            stmt.bindLong(4, date.getTime());
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public TodoItem readEntity(Cursor cursor, int offset) {
        TodoItem entity = new TodoItem( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // thing
            cursor.getShort(offset + 2) != 0, // isDone
            cursor.isNull(offset + 3) ? null : new java.util.Date(cursor.getLong(offset + 3)) // date
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, TodoItem entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setThing(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setIsDone(cursor.getShort(offset + 2) != 0);
        entity.setDate(cursor.isNull(offset + 3) ? null : new java.util.Date(cursor.getLong(offset + 3)));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(TodoItem entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(TodoItem entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(TodoItem entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
